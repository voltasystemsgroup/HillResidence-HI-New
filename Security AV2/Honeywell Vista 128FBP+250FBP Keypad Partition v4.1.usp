/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "Honeywell Vista 128/250FBP & 128/250BPE Keypad Partition Feedback v4.1"

#DEFINE_CONSTANT	ciKEYS		15
#DEFINE_CONSTANT	ciSTAR		11
#DEFINE_CONSTANT	ciPOUND		12
#DEFINE_CONSTANT	ciKEYA		13
#DEFINE_CONSTANT	ciKEYB		14
#DEFINE_CONSTANT	ciKEYC		15

// #CATEGORY "" 
#CATEGORY "21" // Security
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE

#HELP_BEGIN
	For use inside the Honeywell Vista 128/250FBP & 128/250BPE Keypad v4.1 module only.
#HELP_END
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Refresh, Send_Keys, Key[ciKEYS];
STRING_INPUT	Partition[1];
BUFFER_INPUT	From_Module$[250];

DIGITAL_OUTPUT	Back_Light_Fb;
STRING_OUTPUT	To_Queue$;
ANALOG_OUTPUT	LED_Status, Back_Light_Mode;
STRING_OUTPUT	Text_Line_1$, Text_Line_2$;
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER iTemp, iBacklight, iLED, iTempKey, iRefresh;
INTEGER iComportRxSemaphore;
STRING	sTemp[50], sKeys[5], sTemp1[16], sResponse[4], sPartition[1],
		sText1$[16], sText2$[16];
STRING sModuleRxMsg[50];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
String_Function sfCheckSum(STRING fsTemp)
{
	INTEGER a, iTemp;
	
	iTemp = 0;
	for(a = 1 to len(fsTemp))
	{
		iTemp = iTemp + byte(fsTemp, a);
	}
	iTemp = iTemp mod 0x100;
	iTemp = 0x100 - iTemp;
	makestring(fsTemp, "%s%02X\x0D\x0A", fsTemp, iTemp);
	Return (fsTemp);
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
Push Refresh
{
	iRefresh = 1;
}

Push Key
{
	iTempKey = getlastmodifiedarrayindex();
	if(len(sKeys) < 5)
	{
		if(iTempKey <= 10)
		{
			iTempKey = iTempKey - 1;
			makestring(sKeys, "%s%u", sKeys, iTempKey);
		}
		else if(iTempKey = ciSTAR)
		{
			makestring(sKeys, "%sA", sKeys);
		}
		else if(iTempKey = ciPOUND)
		{
			makestring(sKeys, "%sB", sKeys);
		}
		else if(iTempKey = ciKEYA)
		{
			makestring(sTemp, "KS%sC00", sPartition);
			makestring(sTemp, "%02X%s", len(sTemp) + 4, sTemp);
			To_Queue$ = sfCheckSum(sTemp);
//			makestring(sKeys, "%sC", sKeys);
		}
		else if(iTempKey = ciKEYB)
		{
			makestring(sTemp, "KS%sD00", sPartition);
			makestring(sTemp, "%02X%s", len(sTemp) + 4, sTemp);
			To_Queue$ = sfCheckSum(sTemp);
//			makestring(sKeys, "%sD", sKeys);
		}
		else if(iTempKey = ciKEYC)
		{
			makestring(sTemp, "KS%sE00", sPartition);
			makestring(sTemp, "%02X%s", len(sTemp) + 4, sTemp);
			To_Queue$ = sfCheckSum(sTemp);
//			makestring(sKeys, "%sE", sKeys);
		}
	}
	if(len(sKeys) = 5)
	{
		makestring(sTemp, "KS%s%s00", sPartition, sKeys);
		makestring(sTemp, "%02X%s", len(sTemp) + 4, sTemp);
		To_Queue$ = sfCheckSum(sTemp);
		sTemp = "";
		sKeys = "";
	}
}

Push Send_Keys
{
	if(len(sKeys) > 0)
	{
		makestring(sTemp, "KS%s%s00", sPartition, sKeys);
		makestring(sTemp, "%02X%s", len(sTemp) + 4, sTemp);
		To_Queue$ = sfCheckSum(sTemp);
		sTemp = "";
		sKeys = "";
	}
}

FUNCTION ProcessModuleMessage()
{
    iBacklight = byte(sModuleRxMsg, 5) / 128;
    Back_Light_Fb = iBacklight;
    Back_Light_Mode = iBacklight;
    sTemp1 = chr(byte(sModuleRxMsg, 5) mod 128) + mid(sModuleRxMsg, 6, 15);
    if((sTemp1 <> sText1$) || (iRefresh = 1))
    {
        sText1$ = sTemp1;
        Text_Line_1$ = sText1$;
    }
    sTemp1 = mid(sModuleRxMsg, 21, 16);
    if((sTemp1 <> sText2$) || (iRefresh = 1))
    {
        sText2$ = sTemp1;
        Text_Line_2$ = sText2$;
        iRefresh = 0;
    }
    iTemp = byte(sModuleRxMsg, 37);
    iLED = iTemp;
    LED_Status = iLED;
}

#if_series3
THREADSAFE CHANGE From_Module$
{
    while (1)
    {
        try
        {
            sModuleRxMsg = gather("\x0D\x0A", From_Module$);
            if((find(sResponse, sModuleRxMsg) = 1) && (len(sModuleRxMsg) > 37))
            {
                ProcessModuleMessage();
            }        
            sModuleRxMsg = "";        
        }
        catch
        {
            print("3 Series issue with Comport message handeling\n");
        }
    }
}
#else
CHANGE From_Module$
{
    if (iComportRxSemaphore = 0)
    {
        iComportRxSemaphore = 1;
    
        while(find("\x0D\x0A", From_Module$) > 0)
        {
            sModuleRxMsg = remove("\x0D\x0A", From_Module$);
            
            if((find(sResponse, sModuleRxMsg) = 1) && (len(sModuleRxMsg) > 37))
            {
                ProcessModuleMessage();            
            }
            sModuleRxMsg = "";
        }
        iComportRxSemaphore = 0;
    }
}
#endif

CHANGE Partition
{
	makestring(sResponse, "29kd");
	makestring(sPartition, "%s", Partition);
}
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	sTemp = "";
	sKeys = "";
	iRefresh = 0;
    iComportRxSemaphore = 0;
}
